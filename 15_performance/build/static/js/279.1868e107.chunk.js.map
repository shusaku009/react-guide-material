{"version":3,"file":"static/js/279.1868e107.chunk.js","mappings":"mLAEA,SAASA,EAASC,EAAWC,GAC3B,OAAGD,EAAUE,SAAWD,EAAUC,MAUpC,CAEA,MAYA,GAZkBC,EAAAA,EAAAA,OAAKC,IAAiB,IAAhB,OAAEF,GAAQE,EAGhC,OAFAC,QAAQC,IAAI,iBAAkB,gBAG5BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EAEpBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kEACJF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,gEAAYP,OACd,GAEPH,E,yFCpBH,MAqCA,EArCgBY,KACdN,QAAQC,IAAI,iBACZ,MAAOM,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,IAC9BZ,EAAQa,IAAaD,EAAAA,EAAAA,UAAS,GACrC,OACEP,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kEACJF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEM,QAASA,KACPH,GAAWI,GAAQA,EAAM,GAAE,EAC3BR,SACH,yBAGDC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,4CAERF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEM,QAASA,KACPD,GAAWE,GAAQA,EAAM,GAAE,EAC3BR,SACH,yBAGDC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,sEAGVC,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,gEAAYG,QAEjBF,EAAAA,EAAAA,KAACQ,EAAAA,QAAK,CAAChB,OAAQA,MACX,C,+CCrCV,SAAiB,C","sources":["020_memo/end/Child.js","020_memo/end/Example.js","webpack://react-app-template/./src/020_memo/end/Example.css?2d7c"],"sourcesContent":["import { memo } from \"react\";\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  if(prevProps.countB !== nextProps.countB) {\r\n    return false; // 再レンダリング\r\n  } else {\r\n    return true; // 再レンダリング発生なし\r\n  }\r\n  /*\r\n  nextProps を render に渡した結果が\r\n  prevProps を render に渡した結果となるときに true を返し\r\n  それ以外のときに false を返す\r\n  */\r\n}\r\n\r\nconst ChildMemo = memo(({ countB }) => {\r\n  console.log(\"%cChild render\", \"color: red;\");\r\n\r\n  return (\r\n    <div className=\"child\"\r\n    >\r\n      <h2>子コンポーネント領域</h2>\r\n      <span>ボタンBクリック回数：{countB}</span>\r\n    </div>\r\n  );\r\n}, areEqual);\r\n\r\nexport default ChildMemo;\r\n","// POINT　memo関数で再レンダリングの抑止\r\nimport React, { useState } from \"react\";\r\nimport Child from \"./Child\";\r\nimport \"./Example.css\";\r\n\r\nconst Example = () => {\r\n  console.log(\"Parent render\");\r\n  const [countA, setCountA] = useState(0);\r\n  const [countB, setCountB] = useState(0);\r\n  return (\r\n    <div className=\"parent\">\r\n      <div>\r\n        <h3>親コンポーネント領域</h3>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              setCountA((pre) => pre + 1);\r\n            }}\r\n          >\r\n            ボタンA\r\n          </button>\r\n          <span>親のstateを更新</span>\r\n        </div>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              setCountB((pre) => pre + 1);\r\n            }}\r\n          >\r\n            ボタンB\r\n          </button>\r\n          <span>子のpropsに渡すstateを更新</span>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <p>ボタンAクリック回数：{countA}</p>\r\n      </div>\r\n      <Child countB={countB} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["areEqual","prevProps","nextProps","countB","memo","_ref","console","log","_jsxs","className","children","_jsx","Example","countA","setCountA","useState","setCountB","onClick","pre","Child"],"sourceRoot":""}