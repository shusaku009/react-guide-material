{"version":3,"file":"static/js/784.b72b292f.chunk.js","mappings":"mLAEA,MAYA,EAZcA,EAAAA,MAAWC,IAA0B,IAAzB,OAAEC,EAAM,QAAEC,GAASF,EAG3C,OAFAG,QAAQC,IAAI,iBAAkB,gBAG5BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,QAAOC,SAAA,EACpBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kEACJC,EAAAA,EAAAA,KAAA,UAAQN,QAASA,EAAQK,SAAC,yBAC1BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,gEAAYN,OACX,G,0FCLV,MAgCA,EAhCgBQ,KACdN,QAAQC,IAAI,iBACZ,MAAOM,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,IAC9BX,EAAQY,IAAaD,EAAAA,EAAAA,UAAS,GAE/BE,GAAeC,EAAAA,EAAAA,cAAY,KAC/BF,EAAUZ,EAAS,EAAE,GACrB,CAACA,IAEH,OACEI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,SAAQC,SAAA,EACrBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kEACJF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACEN,QAASA,KACPS,GAAWK,GAAQA,EAAM,GAAE,EAC3BT,SACH,yBAGDC,EAAAA,EAAAA,KAAA,QAAAD,SAAM,+CAGVC,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,gEAAYG,QAEjBF,EAAAA,EAAAA,KAACS,EAAAA,QAAK,CAAChB,OAAQA,EAAQC,QAASY,MAC5B,C,+CChCV,SAAiB,C","sources":["040_useCallback_deps/end/Child.js","040_useCallback_deps/end/Example.js","webpack://react-app-template/./src/040_useCallback_deps/end/Example.css?35dd"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Child = React.memo(({ countB, onClick }) => {\r\n  console.log(\"%cChild render\", \"color: red;\");\r\n\r\n  return (\r\n    <div className=\"child\">\r\n      <h2>子コンポーネント領域</h2>\r\n      <button onClick={onClick}>ボタンB</button>\r\n      <p>ボタンBクリック回数：{countB}</p>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Child;\r\n","// POINT useCallbackの依存配列の意味\r\nimport React, { useCallback, useState } from \"react\";\r\nimport Child from \"./Child\";\r\nimport \"./Example.css\";\r\n\r\nconst Example = () => {\r\n  console.log(\"Parent render\");\r\n  const [countA, setCountA] = useState(0);\r\n  const [countB, setCountB] = useState(0);\r\n\r\n  const clickHandler = useCallback(() => {\r\n    setCountB(countB + 1);\r\n  },[countB]);\r\n  \r\n  return (\r\n    <div className=\"parent\">\r\n      <div>\r\n        <h3>親コンポーネント領域</h3>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              setCountA((pre) => pre + 1);\r\n            }}\r\n          >\r\n            ボタンA\r\n          </button>\r\n          <span>親のstateを更新</span>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <p>ボタンAクリック回数：{countA}</p>\r\n      </div>\r\n      <Child countB={countB} onClick={clickHandler}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Example;\r\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["React","_ref","countB","onClick","console","log","_jsxs","className","children","_jsx","Example","countA","setCountA","useState","setCountB","clickHandler","useCallback","pre","Child"],"sourceRoot":""}